"use strict";
var __awaiter =
    (this && this.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done
                    ? resolve(result.value)
                    : new P(function (resolve) {
                          resolve(result.value);
                      }).then(fulfilled, rejected);
            }
            step(
                (generator = generator.apply(thisArg, _arguments || [])).next()
            );
        });
    };
var __generator =
    (this && this.__generator) ||
    function (thisArg, body) {
        var _ = {
                label: 0,
                sent: function () {
                    if (t[0] & 1) throw t[1];
                    return t[1];
                },
                trys: [],
                ops: [],
            },
            f,
            y,
            t,
            g;
        return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === "function" &&
                (g[Symbol.iterator] = function () {
                    return this;
                }),
            g
        );
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (
                        ((f = 1),
                        y &&
                            (t =
                                y[
                                    op[0] & 2
                                        ? "return"
                                        : op[0]
                                        ? "throw"
                                        : "next"
                                ]) &&
                            !(t = t.call(y, op[1])).done)
                    )
                        return t;
                    if (((y = 0), t)) op = [0, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (
                                !((t = _.trys),
                                (t = t.length > 0 && t[t.length - 1])) &&
                                (op[0] === 6 || op[0] === 2)
                            ) {
                                _ = 0;
                                continue;
                            }
                            if (
                                op[0] === 3 &&
                                (!t || (op[1] > t[0] && op[1] < t[3]))
                            ) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2]) _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                } catch (e) {
                    op = [6, e];
                    y = 0;
                } finally {
                    f = t = 0;
                }
            if (op[0] & 5) throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(exports, "__esModule", { value: true });
var moment_1 = __importDefault(require("moment"));
var result_1 = require("../../../datatypes/result");
var MainController = /** @class */ (function () {
    function MainController(
        masterDBController,
        controllerConnections,
        controllerPromiseConnections,
        acl
    ) {
        var _this = this;
        this.masterDBController = masterDBController;
        this.controllerConnections = controllerConnections;
        this.controllerPromiseConnections = controllerPromiseConnections;
        this.acl = acl;
        this.manage = function (conn, invocation) {
            return invocation.then(
                function (value) {
                    _this.tryReleaseConnectionPromise(conn);
                    return Promise.resolve(value);
                },
                function (err) {
                    _this.tryReleaseConnectionPromise(conn);
                    return Promise.reject(err);
                }
            );
        };
    }
    MainController.prototype.getUser = function (req) {
        return req.headers["user"];
    };
    MainController.prototype.getTokenId = function (req) {
        return req.headers["tokenid"];
    };
    MainController.prototype.getAccountId = function (req) {
        return parseInt(req.headers["accountid"]);
    };
    MainController.prototype.verifyAccess = function (
        req,
        res,
        resource,
        callBack
    ) {
        var _this = this;
        var user = req.headers["user"];
        var tokenId = req.headers["tokenid"];
        var accountId = parseInt(req.headers["accountid"]);
        this.masterDBController.verifySession(
            user,
            tokenId,
            accountId,
            function (err, authError, response, dbName) {
                if (err || authError) {
                    res.send({
                        result: result_1.ResultCode.Error,
                        message: "messages.UNVERIFIED_SESSION",
                        data:
                            "Sesion no verificada para el usuario " +
                            user +
                            ". Detalles: " +
                            err +
                            " " +
                            authError,
                    });
                } else {
                    _this.acl
                        .getACL()
                        .isAllowed(
                            user,
                            resource,
                            "get",
                            function (err, response) {
                                if (response) {
                                    callBack(dbName);
                                } else {
                                    console.log(
                                        "[=== ERROR ante de PERMISSION_DENIED ===][" +
                                            new Date() +
                                            "] user" +
                                            user +
                                            " tokenId " +
                                            tokenId +
                                            " accountId: " +
                                            accountId +
                                            "resource: " +
                                            resource
                                    );
                                    console.log(JSON.stringify(err));
                                    console.log(
                                        "=============================================================="
                                    );
                                    console.log(
                                        "===== TERMINADO POR ERROR NO MANEJADO (PERMISSION_DENIED) ====="
                                    );
                                    console.log(
                                        "=============================================================="
                                    );
                                    res.send({
                                        result: result_1.ResultCode.Error,
                                        message:
                                            "messages.PERMISSION_DENIED: " +
                                            JSON.stringify(err),
                                        data: "res: " + resource,
                                    });
                                    process.exit(1);
                                }
                            }
                        );
                }
            }
        );
    };
    MainController.prototype.verifyAccessWithPromise = function (
        user,
        tokenId,
        accountId,
        resource
    ) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [
                    2 /*return*/,
                    new Promise(function (resolve, reject) {
                        _this.masterDBController.verifySession(
                            user,
                            tokenId,
                            accountId,
                            function (err, authError, response, dbName) {
                                if (err || authError) {
                                    reject("messages.UNVERIFIED_SESSION");
                                } else {
                                    _this.acl
                                        .getACL()
                                        .isAllowed(
                                            user,
                                            resource,
                                            "get",
                                            function (err, response) {
                                                if (response) {
                                                    resolve(dbName);
                                                } else {
                                                    console.log(
                                                        "Enviara un permission denied"
                                                    );
                                                    console.log(
                                                        "Ejecuto isAllowed con user: " +
                                                            user +
                                                            ", resource: " +
                                                            resource
                                                    );
                                                    console.log(
                                                        "[=== ERROR ante de PERMISSION_DENIED ===][" +
                                                            new Date() +
                                                            "] user" +
                                                            user +
                                                            " tokenId " +
                                                            tokenId +
                                                            " accountId: " +
                                                            accountId +
                                                            "resource: " +
                                                            resource
                                                    );
                                                    reject(
                                                        "messages.PERMISSION_DENIED."
                                                    );
                                                }
                                            }
                                        );
                                }
                            }
                        );
                    }),
                ];
            });
        });
    };
    MainController.prototype.getPool = function (dbName, callBack) {
        var pool = this.controllerConnections.getUserConnection(dbName);
        callBack(pool);
    };
    MainController.prototype.getConnection = function (dbName, res, callBack) {
        var _this = this;
        var pool = this.controllerConnections.getUserConnection(dbName);
        pool.getConnection(function (err, con) {
            if (err) {
                try {
                    console.error(new Date(), err);
                    _this.tryReleaseConnection(con);
                } finally {
                    res.send({
                        result: result_1.ResultCode.Error,
                        message: "Error al crear la conexion",
                    });
                }
            } else {
                try {
                    callBack(con);
                } finally {
                    _this.tryReleaseConnection(con);
                }
            }
        });
    };
    MainController.prototype.getConnectionWithPromise = function (dbName) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [
                    2 /*return*/,
                    new Promise(function (resolve, reject) {
                        var pool =
                            _this.controllerPromiseConnections.getUserConnection(
                                dbName
                            );
                        pool.getConnection()
                            .then(function (conn) {
                                resolve(conn);
                            })
                            .catch(function (err) {
                                console.error(err);
                                var error = {
                                    result: result_1.ResultCode.Error,
                                    message: "Error al crear la conexion",
                                    details: err,
                                };
                                reject(error);
                            });
                    }),
                ];
            });
        });
    };
    /**
     * En caso de que la conexion este abierta, la libera.
     * @param con Conexion de MySql
     */
    MainController.prototype.tryReleaseConnectionPromise = function (con) {
        if (con && con.connection.state === "authenticated" && con.release) {
            con.release();
            return true;
        }
        return false;
    };
    /**
     * En caso de que la conexión este abierta, la libera.
     * @param con Conexión de MySql
     */
    MainController.prototype.tryReleaseConnection = function (con) {
        if (con && con.state === "authenticated" && con.release) {
            con.release();
            return true;
        }
        return false;
    };
    MainController.prototype.catchError = function (req, res, wrappedFn) {
        try {
            wrappedFn();
        } catch (err) {
            console.error(new Date() + ": " + err);
            res.send({
                result: result_1.ResultCode.Error,
                message: "Error interno.",
            });
        }
    };
    MainController.prototype.errorHandler = function (dbName, wrappedFn) {
        try {
            wrappedFn();
        } catch (err) {
            // TODO: insertar en la base de datos
            console.error(new Date(), err);
        }
    };
    MainController.prototype.calculateMinutesDiff = function (
        dateMax,
        dateMin
    ) {
        var total;
        var momentMax = moment_1.default(dateMax, "YYYY-MM-DDTHH:mm:ss.SSS'Z'");
        var momentMin = moment_1.default(dateMin, "YYYY-MM-DDTHH:mm:ss.SSS'Z'");
        total = momentMax.diff(momentMin, "minutes");
        return total;
    };
    MainController.prototype.calculateSecondsDiff = function (
        dateMax,
        dateMin
    ) {
        var total;
        var momentMax = moment_1.default(dateMax, "YYYY-MM-DDTHH:mm:ss.SSS'Z'");
        var momentMin = moment_1.default(dateMin, "YYYY-MM-DDTHH:mm:ss.SSS'Z'");
        total = momentMax.diff(momentMin, "seconds");
        return total;
    };
    MainController.prototype.getMoraType = function (dbName) {
        switch (dbName) {
            case "requiro_moratemprana":
                return MoraType.moraTemprana;
            case "requiro_test":
                return MoraType.moraTardia;
            default:
                throw new Error(
                    "No se puede obtener el tipo de mora segun DB '" +
                        dbName +
                        "'."
                );
        }
    };
    return MainController;
})();
exports.MainController = MainController;
var MoraType;
(function (MoraType) {
    MoraType["moraTemprana"] = "moraTemprana";
    MoraType["moraTardia"] = "moraTardia";
})((MoraType = exports.MoraType || (exports.MoraType = {})));
//# sourceMappingURL=mainController.js.map
